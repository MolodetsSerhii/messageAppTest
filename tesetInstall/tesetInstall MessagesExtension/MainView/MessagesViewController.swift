//
//  MessagesViewController.swift
//  tesetInstall MessagesExtension
//
//  Created by Serhii Molodets on 25.09.2023.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        presentRatingsViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentRatingsViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    func presentRatingsViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle){
        let viewcontroller : UIViewController
        if presentationStyle == .compact{
            let vc = CompactViewController.instantiateFrom(appStoryboard: .compact)
            vc.delegate = self
            viewcontroller = vc
        }
        else{
            let vc = ExpandedViewController.instantiateFrom(appStoryboard: .expanded)
            vc.delegate = self
            viewcontroller = vc
        }
        
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
        
        addChild(viewcontroller)
        
        viewcontroller.view.frame = view.bounds
        viewcontroller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(viewcontroller.view)
        
        viewcontroller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        viewcontroller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        viewcontroller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        viewcontroller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        viewcontroller.didMove(toParent: self)
    }
    
    fileprivate func composeMessage(with url: URL, layoutImg: UIImage?, session: MSSession? = nil) -> MSMessage? {
        let components = URLComponents()
    
        let layout = MSMessageTemplateLayout()
 
        layout.mediaFileURL = url
        
        
        let message = MSMessage(session: session ?? MSSession())
        
        if let conversation = activeConversation,
            let msg = conversation.selectedMessage{
            if msg.senderParticipantIdentifier == conversation.localParticipantIdentifier {
                layout.caption =  "$\(msg.senderParticipantIdentifier.uuidString)"
            }
            else{
                layout.caption =  "$\(msg.senderParticipantIdentifier.uuidString)"
            }
        }
    
        message.url = components.url!
        message.layout = layout

        return message
    }
}

extension MessagesViewController: CompactViewControllerDelegate {
    func didSelectRecord() {
        requestPresentationStyle(.expanded)
    }
}
extension MessagesViewController: ExpandedViewControllerDelegate {
    func sendButtonDidTap(with url: URL) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }

        guard let message = composeMessage(with: url, layoutImg: nil, session: conversation.selectedMessage?.session)
            else { return }
        
        // Add the message to the conversation.
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
}


